Terminals which are not used

   TOK_BLOCK
   TOK_CALL
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_RETURNVOID
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_DECLID
   TOK_NEWSTRING
   TOK_VARDECL
   TOK_INDEX
   TOK_FUNCTION
   TOK_PARENS


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl_list '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 fielddecl_list: fielddecl_list fielddecl ';'
   11               | fielddecl ';'

   12 fielddecl: type TOK_IDENT
   13          | type TOK_ARRAY TOK_IDENT

   14 type: TOK_VOID
   15     | TOK_INT
   16     | TOK_STRING
   17     | TOK_CHAR
   18     | TOK_IDENT
   19     | TOK_TYPEID

   20 function: identdecl '(' ')' ';'
   21         | identdecl '(' ')' block
   22         | identdecl params ')' ';'
   23         | identdecl params ')' block

   24 params: '(' identdecl
   25       | params ',' identdecl

   26 identdecl: type TOK_ARRAY TOK_IDENT
   27          | type TOK_IDENT

   28 block: '{' '}'
   29      | blockhead '}'

   30 blockhead: blockhead statement
   31          | '{' statement

   32 statement: block
   33          | vardecl
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement
   41       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   42 return: TOK_RETURN expr ';'
   43       | TOK_RETURN ';'

   44 expr: expr TOK_IFELSE expr
   45     | expr TOK_EQ expr
   46     | expr TOK_NE expr
   47     | expr TOK_LT expr
   48     | expr TOK_LE expr
   49     | expr TOK_GT expr
   50     | expr TOK_GE expr
   51     | expr '+' expr
   52     | expr '-' expr
   53     | expr '*' expr
   54     | expr '/' expr
   55     | expr '%' expr
   56     | expr '=' expr
   57     | '!' expr
   58     | '-' expr
   59     | '+' expr
   60     | allocator
   61     | call
   62     | '(' expr ')'
   63     | variable
   64     | constant

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' expr ')'
   67          | TOK_NEW type '[' expr ']'

   68 call: TOK_IDENT '(' ')'
   69     | TOK_IDENT callargs ')'

   70 callargs: '(' expr
   71         | callargs ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 57
'%' (37) 55
'(' (40) 20 21 24 39 40 41 62 65 66 68 70
')' (41) 20 21 22 23 39 40 41 62 65 66 68 69
'*' (42) 53
'+' (43) 51 59
',' (44) 25 71
'-' (45) 52 58
'.' (46) 74
'/' (47) 54
';' (59) 6 10 11 20 22 37 38 42 43
'=' (61) 38 56
'[' (91) 67 73
']' (93) 67 73
'{' (123) 8 9 28 31
'}' (125) 5 8 9 28 29
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 17
TOK_INT (260) 15
TOK_STRING (261) 16 66
TOK_IF (262) 40 41
TOK_ELSE (263) 41
TOK_WHILE (264) 39
TOK_RETURN (265) 42 43
TOK_STRUCT (266) 8 9
TOK_NULL (267) 78
TOK_NEW (268) 65 66 67
TOK_ARRAY (269) 13 26
TOK_EQ (270) 45
TOK_NE (271) 46
TOK_LT (272) 47
TOK_LE (273) 48
TOK_GT (274) 49
TOK_GE (275) 50
TOK_IDENT (276) 8 9 12 13 18 26 27 65 68 69 72 74
TOK_INTCON (277) 75
TOK_CHARCON (278) 76
TOK_STRINGCON (279) 77
TOK_BLOCK (280)
TOK_CALL (281)
TOK_IFELSE (282) 44
TOK_INITDECL (283)
TOK_POS (284)
TOK_NEG (285)
TOK_NEWARRAY (286)
TOK_TYPEID (287) 19
TOK_FIELD (288)
TOK_ORD (289)
TOK_CHR (290)
TOK_ROOT (291)
TOK_RETURNVOID (292)
TOK_PARAMLIST (293)
TOK_PROTOTYPE (294)
TOK_DECLID (295)
TOK_NEWSTRING (296)
TOK_VARDECL (297)
TOK_INDEX (298)
TOK_FUNCTION (299)
TOK_PARENS (300)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
start (63)
    on left: 1, on right: 0
program (64)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (65)
    on left: 8 9, on right: 2
fielddecl_list (66)
    on left: 10 11, on right: 8 10
fielddecl (67)
    on left: 12 13, on right: 10 11
type (68)
    on left: 14 15 16 17 18 19, on right: 12 13 26 27 67
function (69)
    on left: 20 21 22 23, on right: 3
params (70)
    on left: 24 25, on right: 22 23 25
identdecl (71)
    on left: 26 27, on right: 20 21 22 23 24 25 38
block (72)
    on left: 28 29, on right: 21 23 32
blockhead (73)
    on left: 30 31, on right: 29 30
statement (74)
    on left: 32 33 34 35 36 37, on right: 4 30 31 39 40 41
vardecl (75)
    on left: 38, on right: 33
while (76)
    on left: 39, on right: 34
ifelse (77)
    on left: 40 41, on right: 35
return (78)
    on left: 42 43, on right: 36
expr (79)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63 64, on right: 37 38 39 40 41 42 44 45 46 47 48 49 50 51 52
    53 54 55 56 57 58 59 62 66 67 70 71 73 74
allocator (80)
    on left: 65 66 67, on right: 60
call (81)
    on left: 68 69, on right: 61
callargs (82)
    on left: 70 71, on right: 69 71
variable (83)
    on left: 72 73 74, on right: 63
constant (84)
    on left: 75 76 77 78, on right: 64


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    type       go to state 26
    function   go to state 27
    identdecl  go to state 28
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42


state 5

   14 type: TOK_VOID .

    $default  reduce using rule 14 (type)


state 6

   17 type: TOK_CHAR .

    $default  reduce using rule 17 (type)


state 7

   15 type: TOK_INT .

    $default  reduce using rule 15 (type)


state 8

   16 type: TOK_STRING .

    $default  reduce using rule 16 (type)


state 9

   40 ifelse: TOK_IF . '(' expr ')' statement
   41       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 43


state 10

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 44


state 11

   42 return: TOK_RETURN . expr ';'
   43       | TOK_RETURN . ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 46
    '('            shift, and go to state 24

    expr       go to state 47
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 12

    8 structdef: TOK_STRUCT . TOK_IDENT '{' fielddecl_list '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 48


state 13

   78 constant: TOK_NULL .

    $default  reduce using rule 78 (constant)


state 14

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' expr ')'
   67          | TOK_NEW . type '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 49
    TOK_IDENT   shift, and go to state 50
    TOK_TYPEID  shift, and go to state 19

    type  go to state 51


state 15

   18 type: TOK_IDENT .
   68 call: TOK_IDENT . '(' ')'
   69     | TOK_IDENT . callargs ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 52

    TOK_ARRAY  reduce using rule 18 (type)
    TOK_IDENT  reduce using rule 18 (type)
    $default   reduce using rule 72 (variable)

    callargs  go to state 53


state 16

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


state 17

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


state 18

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


state 19

   19 type: TOK_TYPEID .

    $default  reduce using rule 19 (type)


state 20

   57 expr: '!' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 54
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 21

   59 expr: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 55
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 22

   58 expr: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 56
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 23

   28 block: '{' . '}'
   31 blockhead: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '}'            shift, and go to state 57
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 26
    identdecl  go to state 58
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 59
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 24

   62 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 60
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 26

   26 identdecl: type . TOK_ARRAY TOK_IDENT
   27          | type . TOK_IDENT

    TOK_ARRAY  shift, and go to state 61
    TOK_IDENT  shift, and go to state 62


state 27

    3 program: program function .

    $default  reduce using rule 3 (program)


state 28

   20 function: identdecl . '(' ')' ';'
   21         | identdecl . '(' ')' block
   22         | identdecl . params ')' ';'
   23         | identdecl . params ')' block
   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 63
    '('  shift, and go to state 64

    params  go to state 65


state 29

   32 statement: block .

    $default  reduce using rule 32 (statement)


state 30

   29 block: blockhead . '}'
   30 blockhead: blockhead . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '}'            shift, and go to state 66
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 26
    identdecl  go to state 58
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 67
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 32

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


state 33

   34 statement: while .

    $default  reduce using rule 34 (statement)


state 34

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


state 35

   36 statement: return .

    $default  reduce using rule 36 (statement)


state 36

   37 statement: expr . ';'
   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ';'         shift, and go to state 83


state 37

   60 expr: allocator .

    $default  reduce using rule 60 (expr)


state 38

   61 expr: call .

    $default  reduce using rule 61 (expr)


state 39

   63 expr: variable .

    $default  reduce using rule 63 (expr)


state 40

   64 expr: constant .

    $default  reduce using rule 64 (expr)


state 41

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 42

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 43

   40 ifelse: TOK_IF '(' . expr ')' statement
   41       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 84
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 44

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 85
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 45

   68 call: TOK_IDENT . '(' ')'
   69     | TOK_IDENT . callargs ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 52

    $default  reduce using rule 72 (variable)

    callargs  go to state 53


state 46

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


state 47

   42 return: TOK_RETURN expr . ';'
   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ';'         shift, and go to state 86


state 48

    8 structdef: TOK_STRUCT TOK_IDENT . '{' fielddecl_list '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 87


state 49

   16 type: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 88

    $default  reduce using rule 16 (type)


state 50

   18 type: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 89

    $default  reduce using rule 18 (type)


state 51

   67 allocator: TOK_NEW type . '[' expr ']'

    '['  shift, and go to state 90


state 52

   68 call: TOK_IDENT '(' . ')'
   70 callargs: '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24
    ')'            shift, and go to state 91

    expr       go to state 92
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 53

   69 call: TOK_IDENT callargs . ')'
   71 callargs: callargs . ',' expr

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


state 54

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   57     | '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '+'     shift, and go to state 76
    '-'     shift, and go to state 77
    '*'     shift, and go to state 78
    '/'     shift, and go to state 79
    '%'     shift, and go to state 80
    '.'     shift, and go to state 81
    '['     shift, and go to state 82

    $default  reduce using rule 57 (expr)


state 55

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   59     | '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '+'     shift, and go to state 76
    '-'     shift, and go to state 77
    '*'     shift, and go to state 78
    '/'     shift, and go to state 79
    '%'     shift, and go to state 80
    '.'     shift, and go to state 81
    '['     shift, and go to state 82

    $default  reduce using rule 59 (expr)


state 56

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   58     | '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '+'     shift, and go to state 76
    '-'     shift, and go to state 77
    '*'     shift, and go to state 78
    '/'     shift, and go to state 79
    '%'     shift, and go to state 80
    '.'     shift, and go to state 81
    '['     shift, and go to state 82

    $default  reduce using rule 58 (expr)


state 57

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


state 58

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 63


state 59

   31 blockhead: '{' statement .

    $default  reduce using rule 31 (blockhead)


state 60

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   62     | '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ')'         shift, and go to state 95


state 61

   26 identdecl: type TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


state 62

   27 identdecl: type TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


state 63

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 97
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 64

   20 function: identdecl '(' . ')' ';'
   21         | identdecl '(' . ')' block
   24 params: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    TOK_TYPEID  shift, and go to state 19
    ')'         shift, and go to state 99

    type       go to state 26
    identdecl  go to state 100


state 65

   22 function: identdecl params . ')' ';'
   23         | identdecl params . ')' block
   25 params: params . ',' identdecl

    ')'  shift, and go to state 101
    ','  shift, and go to state 102


state 66

   29 block: blockhead '}' .

    $default  reduce using rule 29 (block)


state 67

   30 blockhead: blockhead statement .

    $default  reduce using rule 30 (blockhead)


state 68

   45 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 103
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 69

   46 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 104
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 70

   47 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 105
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 71

   48 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 106
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 72

   49 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 107
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 73

   50 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 108
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 74

   44 expr: expr TOK_IFELSE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 109
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 75

   56 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 110
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 76

   51 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 111
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 77

   52 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 112
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 78

   53 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 113
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 79

   54 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 114
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 80

   55 expr: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 115
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 81

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 116


state 82

   73 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 117
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 83

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


state 84

   40 ifelse: TOK_IF '(' expr . ')' statement
   41       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ')'         shift, and go to state 118


state 85

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ')'         shift, and go to state 119


state 86

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


state 87

    8 structdef: TOK_STRUCT TOK_IDENT '{' . fielddecl_list '}'
    9          | TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    TOK_TYPEID  shift, and go to state 19
    '}'         shift, and go to state 120

    fielddecl_list  go to state 121
    fielddecl       go to state 122
    type            go to state 123


state 88

   66 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 124
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 89

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 125


state 90

   67 allocator: TOK_NEW type '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 126
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 91

   68 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (call)


state 92

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   70 callargs: '(' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82

    $default  reduce using rule 70 (callargs)


state 93

   69 call: TOK_IDENT callargs ')' .

    $default  reduce using rule 69 (call)


state 94

   71 callargs: callargs ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 45
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 24

    expr       go to state 127
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 95

   62 expr: '(' expr ')' .

    $default  reduce using rule 62 (expr)


state 96

   26 identdecl: type TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


state 97

   38 vardecl: identdecl '=' expr . ';'
   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ';'         shift, and go to state 128


state 98

   18 type: TOK_IDENT .

    $default  reduce using rule 18 (type)


state 99

   20 function: identdecl '(' ')' . ';'
   21         | identdecl '(' ')' . block

    ';'  shift, and go to state 129
    '{'  shift, and go to state 23

    block      go to state 130
    blockhead  go to state 30


state 100

   24 params: '(' identdecl .

    $default  reduce using rule 24 (params)


state 101

   22 function: identdecl params ')' . ';'
   23         | identdecl params ')' . block

    ';'  shift, and go to state 131
    '{'  shift, and go to state 23

    block      go to state 132
    blockhead  go to state 30


state 102

   25 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    TOK_TYPEID  shift, and go to state 19

    type       go to state 26
    identdecl  go to state 133


state 103

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   45     | expr TOK_EQ expr .
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 45 (expr)


state 104

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   46     | expr TOK_NE expr .
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 46 (expr)


state 105

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   47     | expr TOK_LT expr .
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 47 (expr)


state 106

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   48     | expr TOK_LE expr .
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 48 (expr)


state 107

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   49     | expr TOK_GT expr .
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 49 (expr)


state 108

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   50     | expr TOK_GE expr .
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77
    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 50 (expr)


state 109

   44 expr: expr . TOK_IFELSE expr
   44     | expr TOK_IFELSE expr .
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82

    $default  reduce using rule 44 (expr)


state 110

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   56     | expr '=' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 75
    '+'     shift, and go to state 76
    '-'     shift, and go to state 77
    '*'     shift, and go to state 78
    '/'     shift, and go to state 79
    '%'     shift, and go to state 80
    '.'     shift, and go to state 81
    '['     shift, and go to state 82

    $default  reduce using rule 56 (expr)


state 111

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   51     | expr '+' expr .
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 51 (expr)


state 112

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   52     | expr '-' expr .
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80
    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 52 (expr)


state 113

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   53     | expr '*' expr .
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 53 (expr)


state 114

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   54     | expr '/' expr .
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 54 (expr)


state 115

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   55     | expr '%' expr .
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 81
    '['  shift, and go to state 82

    $default  reduce using rule 55 (expr)


state 116

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


state 117

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ']'         shift, and go to state 134


state 118

   40 ifelse: TOK_IF '(' expr ')' . statement
   41       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 26
    identdecl  go to state 58
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 135
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 119

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 26
    identdecl  go to state 58
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 136
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 120

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


state 121

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl_list . '}'
   10 fielddecl_list: fielddecl_list . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    TOK_TYPEID  shift, and go to state 19
    '}'         shift, and go to state 137

    fielddecl  go to state 138
    type       go to state 123


state 122

   11 fielddecl_list: fielddecl . ';'

    ';'  shift, and go to state 139


state 123

   12 fielddecl: type . TOK_IDENT
   13          | type . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 140
    TOK_IDENT  shift, and go to state 141


state 124

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   66 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ')'         shift, and go to state 142


state 125

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


state 126

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   67 allocator: TOK_NEW type '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82
    ']'         shift, and go to state 143


state 127

   44 expr: expr . TOK_IFELSE expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | expr . '=' expr
   71 callargs: callargs ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ      shift, and go to state 68
    TOK_NE      shift, and go to state 69
    TOK_LT      shift, and go to state 70
    TOK_LE      shift, and go to state 71
    TOK_GT      shift, and go to state 72
    TOK_GE      shift, and go to state 73
    TOK_IFELSE  shift, and go to state 74
    '='         shift, and go to state 75
    '+'         shift, and go to state 76
    '-'         shift, and go to state 77
    '*'         shift, and go to state 78
    '/'         shift, and go to state 79
    '%'         shift, and go to state 80
    '.'         shift, and go to state 81
    '['         shift, and go to state 82

    $default  reduce using rule 71 (callargs)


state 128

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


state 129

   20 function: identdecl '(' ')' ';' .

    $default  reduce using rule 20 (function)


state 130

   21 function: identdecl '(' ')' block .

    $default  reduce using rule 21 (function)


state 131

   22 function: identdecl params ')' ';' .

    $default  reduce using rule 22 (function)


state 132

   23 function: identdecl params ')' block .

    $default  reduce using rule 23 (function)


state 133

   25 params: params ',' identdecl .

    $default  reduce using rule 25 (params)


state 134

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


state 135

   40 ifelse: TOK_IF '(' expr ')' statement .
   41       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 144

    $default  reduce using rule 40 (ifelse)


state 136

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


state 137

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl_list '}' .

    $default  reduce using rule 8 (structdef)


state 138

   10 fielddecl_list: fielddecl_list fielddecl . ';'

    ';'  shift, and go to state 145


state 139

   11 fielddecl_list: fielddecl ';' .

    $default  reduce using rule 11 (fielddecl_list)


state 140

   13 fielddecl: type TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 146


state 141

   12 fielddecl: type TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


state 142

   66 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


state 143

   67 allocator: TOK_NEW type '[' expr ']' .

    $default  reduce using rule 67 (allocator)


state 144

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '!'            shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 26
    identdecl  go to state 58
    block      go to state 29
    blockhead  go to state 30
    statement  go to state 147
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


state 145

   10 fielddecl_list: fielddecl_list fielddecl ';' .

    $default  reduce using rule 10 (fielddecl_list)


state 146

   13 fielddecl: type TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


state 147

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)
